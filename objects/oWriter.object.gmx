<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTerminal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defined Variables
/*
    Text Writing HUD
    1/17/2016 by Gogurt
    A type writing object activated at different terminals.
    It is displayed by adding a new character from the current string.
    Currently, the text stream is defined depending on which room you are in,
    so multiple terminals in one room would require some additional reworking.
    Text streams are made up of as many pages of text you want, and the animation
    for writing all of the text can be skipped with E or Enter.
*/

active = false;
animatingText = true;
finished = false;

animatingLine = 1;
currentPage = 1;
currentCharacter = 1;

//Eventually determined by room-specific strings
fullText = "This is a test of the type writer system. Pretty neato. Here is some more text to test the multiline functionality. Mars and text. It will be nice when we have actual story here. Too bad I'm too lazy to fabricate some for testing purposes.";
fullTextLength = string_length(fullText);

currentText = string_copy(fullText, 0, currentCharacter);

//Multiline page variables
lines[6] = "";
currentLine = 0;
lineIndex = 0;
//Seperates string into multiple lines
/*
    Bug: Currently only works for the first line.
    After 11 spaces are seen, the substring of lineIndex through i
    should be added to the array based on the currentLine index.
    Multiple lines are carrying duplicate string data and space count
    is not representitive of what is added to the array for whatever reason.
*/
var spaceCount = 0;
var i;
for(i = 0; i &lt; string_length(fullText); i++)
{
    if(string_char_at(fullText, i) == " ")
    {
        spaceCount++;
    }
    if(spaceCount == 11)
    {
        //Copying duplicate string stuff. Something about lineIndex?
        lines[currentLine] = string_copy(fullText, lineIndex, i);
        lineIndex = i + 1;
        spaceCount = 0;
        currentLine++;
        
        
        //lines[currentLine] = string_copy(fullText, lineIndex + 1, string_length(fullText));
    
    }
}
//Cleans up the rest of the string that didn't meet the
//above conditional and puts it in the last array index
//lineIndex = i;
lines[currentLine] = string_copy(fullText, lineIndex + 1, string_length(fullText));
show_debug_message(lines[0]);
show_debug_message(lines[1]);
show_debug_message(lines[2]);
show_debug_message(lines[3]);
//currentLine++;

//Visual
depth = 10;

backdropYPos = 15;
animatingBackdrop = false;
backdropOpacity = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Writer Update Manager
if(active)
{
    //Fades in terminal backdrop
    if(animatingBackdrop)
    {
        backdropYPos--;
        backdropOpacity += 0.1;
        if(backdropYPos &lt;= 5)
        {
            animatingBackdrop = false;
            animatingText = true;
        }
    }
    //Animates the string
    if(animatingText &amp;&amp; backdropYPos &lt;= 5)
    {
        currentCharacter++;
        currentText = string_copy(lines[animatingLine], 0, currentCharacter);
        if(string_length(currentText) % 5 == 0)
        {
            //Diversifies sound of terminal if need be.
            //Honestly sounds better with one sound right now.
            /*
            randomize();
            terminalBlipNumber = choose(0,2);
            if(terminalBlipNumber == 0)
            {
                audio_play_sound(aTerminalBlip0,1,false)
            }
            else if(terminalBlipNumber == 1)
            {
                audio_play_sound(aTerminalBlip1,1,false)
            }
            else
            {
                audio_play_sound(aTerminalBlip2,1,false)
            }
            */
            audio_play_sound(aTerminalBlip0,1,false)
        }
        if(string_length(currentText) &gt;= string_length(lines[animatingLine]))
        {
            animatingLine++;
            currentCharacter = 1;
            fullText = lines[animatingLine];
            currentText = string_copy(lines[animatingLine], 0, 1);
            
        }
        
        if(string_length(lines[animatingLine]) == 0)
        {
            animatingLine++;
            animatingText = false;
            finished = true;
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Collision Detection
//When you first activate a terminal
if(keyboard_check_pressed(ord('E')) &amp;&amp; active == false)
{
    active = true;
    animatingBackdrop = true;
    finished = false;
    audio_play_sound(aTerminalStart,1,false)
}
//When all text has been presented, variable reset
else if(keyboard_check_pressed(ord('E')) &amp;&amp; finished == true)
{
    currentCharacter = 1;
    currentText = "";
    active = false;
    backdropYPos = 15;
    backdropOpacity = 0;
    animatingLine = 1;
}
//When text is still animating and you want to reveal the whole page
if(keyboard_check_pressed(ord('E')) &amp;&amp; animatingText &amp;&amp; animatingBackdrop == false)
{
    currentText = fullText;
    animatingText = false;
    finished = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(active)
{
    draw_sprite_ext(sTerminalBackdrop, 1, 5, backdropYPos, 1, 1, 0, c_white, backdropOpacity);
    if(animatingText = true)
    {
        switch(animatingLine)
        {
            case 1:
                draw_text(40, 40, currentText);
            break;
            
            case 2:
                draw_text(40, 40, lines[0]);
                draw_text(40, 70, currentText);
            break;
            
            case 3:
                draw_text(40, 40, lines[0]);
                draw_text(40, 70, lines[1]);
                draw_text(40, 100, currentText);
            break;
            
            //For animating the current line
            //Will also have to dispaly previous lines.
            
            default:
            
            break;
        
        }

    }
    if(finished == true)
    {
        draw_text(40, 40, lines[0]);
        draw_text(40, 70, lines[1]);
        draw_text(40, 100, lines[2]);
        draw_text(40, 130, lines[3]);
        draw_text(40, 160, lines[4]);
    }
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
