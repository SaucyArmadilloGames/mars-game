<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTerminal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defined Variables
/*
    Text Writing HUD
    1/17/2016 by Gogurt
    A type writing object activated at different terminals.
    It is displayed by adding a new character from the current string.
    Currently, the text stream is defined depending on which room you are in,
    so multiple terminals in one room would require some additional reworking.
    Text streams are made up of as many pages of text you want, and the animation
    for writing all of the text can be skipped with E or Enter.
*/

active = false;
animatingText = false;
finished = false;

animatingLine = 0;
currentPage = 1;
currentCharacter = 0;

//Eventually determined by room-specific strings
fullText = "Holy God Damn this is actually working now. This took way too long.|Right now, it's fixated to 5 lines and you have to manually indent|with a special character.|There isn't any page or text speed management either.|But at least the hard part is over with.";

//Seperates string into multiple values with |
linesList = ds_list_create();
ds_list_add(linesList, ScString_Split(fullText, 0, "|"));
ds_list_add(linesList, ScString_Split(fullText, 1, "|"));
ds_list_add(linesList, ScString_Split(fullText, 2, "|"));
ds_list_add(linesList, ScString_Split(fullText, 3, "|"));
ds_list_add(linesList, ScString_Split(fullText, 4, "|"));
ds_list_add(linesList, ScString_Split(fullText, 5, "|"));

currentText = string_copy(ds_list_find_value(linesList, animatingLine), 0, 1);

//Visual
depth = 10;
backdropYPos = 15;
animatingBackdrop = false;
backdropOpacity = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Writer Update Manager
if(active)
{
    //Fades in terminal backdrop
    if(animatingBackdrop)
    {
        backdropYPos--;
        backdropOpacity += 0.1;
        if(backdropYPos &lt;= 5)
        {
            animatingBackdrop = false;
            animatingText = true;
        }
    }
    //Animates the string
    if(animatingText &amp;&amp; backdropYPos &lt;= 5)
    {
        //Character assessment
        if(string_length(currentText) &gt;= string_length(ds_list_find_value(linesList, animatingLine)))
        {
            
            animatingLine++;
            currentCharacter = 1;
            currentText = string_copy(ds_list_find_value(linesList, animatingLine), 0, currentCharacter);
        }
        else
        {
            currentText = string_copy(ds_list_find_value(linesList, animatingLine), 0, currentCharacter);
            currentCharacter++;
            //Audio
            if(string_length(currentText) % 5 == 0)
            {
                audio_play_sound(aTerminalBlip0, 1, false)
            }
        }
        if(animatingLine == 5)
        {
            finished = true;
            animatingText = false;
        }
        
        
        
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Collision Detection
//When you first activate a terminal
if(keyboard_check_pressed(ord('E')) &amp;&amp; active == false)
{
    active = true;
    animatingBackdrop = true;
    finished = false;
    audio_play_sound(aTerminalStart,1,false)
}
//When all text has been presented, variable reset
else if(keyboard_check_pressed(ord('E')) &amp;&amp; finished == true)
{
    currentCharacter = 1;
    currentText = "";
    active = false;
    backdropYPos = 15;
    backdropOpacity = 0;
    animatingLine = 0;
}
//When text is still animating and you want to reveal the whole page
if(keyboard_check_pressed(ord('E')) &amp;&amp; animatingText &amp;&amp; animatingBackdrop == false)
{
    currentText = fullText;
    animatingText = false;
    finished = true;
    animatingLine = 0;
    currentCharacter = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(active)
{
    draw_sprite_ext(sTerminalBackdrop, 1, 5, backdropYPos, 1, 1, 0, c_white, backdropOpacity);
    if(animatingText == true)
    {
        switch(animatingLine)
        {
            case 0:
                draw_text(40, 40, currentText);
            break;
            
            case 1:
                draw_text(40, 40, ds_list_find_value(linesList, 0));
                draw_text(40, 70, currentText);
            break;
            
            case 2:
                draw_text(40, 40, ds_list_find_value(linesList, 0));
                draw_text(40, 70, ds_list_find_value(linesList, 1));
                draw_text(40, 100, currentText);
            break;
            
            case 3:
                draw_text(40, 40, ds_list_find_value(linesList, 0));
                draw_text(40, 70, ds_list_find_value(linesList, 1));
                draw_text(40, 100, ds_list_find_value(linesList, 2));
                draw_text(40, 130, currentText);
            break;
            
            case 4:
                draw_text(40, 40, ds_list_find_value(linesList, 0));
                draw_text(40, 70, ds_list_find_value(linesList, 1));
                draw_text(40, 100, ds_list_find_value(linesList, 2));
                draw_text(40, 130, ds_list_find_value(linesList, 3));
                draw_text(40, 160, currentText);
            break;
            
            case 5:
                draw_text(40, 40, ds_list_find_value(linesList, 0));
                draw_text(40, 70, ds_list_find_value(linesList, 1));
                draw_text(40, 100, ds_list_find_value(linesList, 2));
                draw_text(40, 130, ds_list_find_value(linesList, 3));
                draw_text(40, 160, ds_list_find_value(linesList, 4));
                draw_text(40, 190, currentText);
            break;
            
            //For animating the current line
            //Will also have to display previous lines.
            
            default:
                draw_text(40, 40, ds_list_find_value(linesList, 0));
                draw_text(40, 70, ds_list_find_value(linesList, 1));
                draw_text(40, 100, ds_list_find_value(linesList, 2));
                draw_text(40, 130, ds_list_find_value(linesList, 3));
                draw_text(40, 160, ds_list_find_value(linesList, 4));
                draw_text(40, 190, ds_list_find_value(linesList, 5));
            break;
        
        }

    }
    else if(finished == true)
    {
        draw_text(40, 40, ds_list_find_value(linesList, 0));
        draw_text(40, 70, ds_list_find_value(linesList, 1));
        draw_text(40, 100, ds_list_find_value(linesList, 2));
        draw_text(40, 130, ds_list_find_value(linesList, 3));
        draw_text(40, 160, ds_list_find_value(linesList, 4));
        draw_text(40, 190, ds_list_find_value(linesList, 5));
    }
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
