<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize vars
jumpspeed = 7;
movespeed = 4;
hsp = 0;
vsp = 0;
depth = 10;
image_speed = .25;
global.Armed = false

// Create player's hand
instance_create(x,y,oHand);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ScForceStayInGame();
ScAllDudes();
ScPushOut();

// Player Sprite Facing
pointerDir = point_direction(x,y,mouse_x, mouse_y);
walking = keyboard_check(ord('D')) || keyboard_check(ord('A'));
airborne = !(vsp == 0); 

if (pointerDir &gt; 90 &amp;&amp; pointerDir &lt; 270) image_xscale = -1;
else image_xscale = 1;

if (airborne) image_index = sPlayerAirborn;
else if (walking) sprite_index = sPlayerWalking;
else sprite_index = sPlayerIdle;

// Player Colliding With Things
key_right = keyboard_check(ord('D'));
key_left = -keyboard_check(ord('A'));
key_jump = keyboard_check_pressed(ord('W'));

move = key_left + key_right;
hsp = move * movespeed;
if (place_meeting(x,y+1,oSolid)) vsp = key_jump * -jumpspeed;
ScGravityAndCollision();

///Button Presser
button = instance_place(x, y, pSwitch);
if (button &amp;&amp; keyboard_check_pressed(ord('E')))
{
    switch (button.switchColor)
    {
        case 'red': ScAssertRed(); break;
        case 'green': ScAssertGreen(); break;
        case 'blue': ScAssertBlue(); break;
        case 'orange': ScAssertOrange(); break;
        case 'purple': ScAssertPurple(); break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
